# coding:utf-8
# 选择样本中的PE文件
# 输入：总样本路径
# 删除非PE文件
# 输出：PE文件总数

import os
import struct

import config

# import shutil


# get all PE files of a directory
def readFileChar(path):
    try:
        fileHandle = open(path, "rb")
        data_id = struct.unpack("h", fileHandle.read(2))
        return data_id[0]
        # fileHandle.close()
    except Exception as e:
        print(e)
        return "kkk"


#
def getShifting(path):

    try:
        # 获得0x3c地址的值，pe文件应为0x45 50
        fileHandle = open(path, "rb")
        fileHandle.seek(60, 0)
        data_id = struct.unpack("h", fileHandle.read(2))[0]
        fileHandle.close()
        # print data_id
        fileHandle = open(path, "rb")
        fileHandle.seek(data_id, 0)
        pe = struct.unpack("h", fileHandle.read(2))[0]
        fileHandle.close()
        return pe
    except Exception as e:
        print(e)
        return "kkk"


def pe_select(Path):
    insPath = Path
    count = 0
    for root, dirs, files in os.walk(insPath):
        # print(''.join(root)+'\n'+''.join(dirs)+'\n'+''.join(files))
        print("in for 1")
        for f in files:
            path = os.path.join(root, f)
            shifting = getShifting(path)
            if readFileChar(path) != 23117 or shifting != 17744:
                os.remove(path)
                print(path, "is not pe file ")
            else:
                count += 1
    if insPath == config.path['malware_samplefolder']:
        with open(
                config.path['outfolder'] + config.filename['n_malware'],
                'w',
                encoding='utf-8') as fopen:
            fopen.write(str(count))
        fopen.close()
    else:
        with open(
                config.path['outfolder'] + config.filename['n_normal'],
                'w',
                encoding='utf-8') as fopen:
            fopen.write(str(count))
        fopen.close()
    return


if __name__ == "__main__":
    pe_select(config.path['normal_samplefolder'])
