# coding:utf-8
# 调用vectoring.py作批处理
# 输出.csv格式
# 训练集 sampleID label pixel0 pixel1 pixeln
# 测试集 sampleID pixel0 pixel1 pixeln
# 需要区分label：根据文件路径不同
# 根据比例随机选择测试集 训练集
# ---修改自vector_batch
# 为了多分类 根据目录下文件夹分类标记


import random
import os
import csv
import config
import vectoring


def vector_batch_sub(in_path):
    malwaresample_vector = []
    for fpathe, dirs, fs in os.walk(in_path):
        for f in fs:
            filepath = (os.path.join(fpathe, f))
            vector = vectoring.vectoring(filepath)
            malwaresample_vector.append(vector)
    return malwaresample_vector


def vector_batch():
    v = []
    train_title = ['sampleID', 'label', 'vector']
    test_title = ['sampleID', 'vector']
    with open(
            config.path['outfolder'] + config.filename['train'],
            'w',
            newline='',
            encoding='utf-8') as trainfile:
        with open(
                config.path['outfolder'] + config.filename['test'],
                'w',
                newline='',
                encoding='utf-8') as testfile:
            train_writer = csv.writer(trainfile)
            test_writer = csv.writer(testfile)
            test_writer.writerow(test_title)
            train_writer.writerow(train_title)
            # 先处理恶意样本
            v = vector_batch_sub(config.path['malware_sequencesfolder'])
            tmp = len(v)
            for i in range(0, tmp):
                # 训练集 or 测试集
                ran = random.uniform(0, 1)
                if ran < config.const['ratio']:
                    v[i].insert(0, str(i + 1))
                    test_writer.writerow(v[i])
                else:
                    v[i].insert(0, str(1))
                    v[i].insert(0, str(i + 1))
                    train_writer.writerow(v[i])
        # 处理正常样本
            v = vector_batch_sub(config.path['normal_sequencesfolder'])
            tmp = len(v)
            for i in range(0, tmp):
                # 训练集 or 测试集
                ran = random.uniform(0, 1)
                if ran < config.const['ratio']:
                    v[i].insert(0, str(i + 1))
                    test_writer.writerow(v[i])
                else:
                    v[i].insert(0, str(1))
                    v[i].insert(0, str(i + 1))
                    train_writer.writerow(v[i])
    trainfile.close()
    testfile.close()
    print("ALL done")


if __name__ == '__main__':
    vector_batch()
