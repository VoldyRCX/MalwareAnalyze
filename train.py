# coding:utf-8
# viper module
# 参考《修改web界面执行指令》修改相应内容
# 该文件放置在 ～/viper/modules 下

from viper.common.abstracts import Module
from viper.core.session import __sessions__

import os
import sys
import zipfile
sys.path.append('/home/rec/development/script')
import config
import idabatch
import pe_select


class test(Module):
    cmd = 'train'
    description = '训练'

    def un_zip(self, path=config.path['malware_samplefolder']):
        # 先清空目录
        del_file(path)
        zip_file = zipfile.ZipFile(__sessions__.current.file.path)
        for names in zip_file.namelist():
            zip_file.extract(names, path)
        zip_file.close()

    def __init__(self):
        super(test, self).__init__()
        self.parser.add_argument(
            '-t', '--test', action='store_true', help='测试')
        self.parser.add_argument(
            '-b', '--IDAbatch', action='store_true', help='IDA批处理')
        self.parser.add_argument(
            '-pn', '--normal', action='store_true', help='处理正常样本')
        self.parser.add_argument(
            '-pm', '--malware', action='store_true', help='处理恶意样本')
        self.parser.add_argument(
            '-tr', '--train', action='store_true', help='训练模型')

    def run(self):
        super(test, self).run()
        # self.log('log?', "正在处理，这可能需要几分种，请耐心等待")

        if self.args:
            # self.log('test', config.path['sequencesfolder'])
            # 命令参数
            if self.args.test:
                # self.un_zip()
                self.log("log", "sub test")
                # self.test()
                return
            # print("this is the firstfff print")
            # self.log("log", "log in 1")
            if self.args.IDAbatch:
                # self.log("log", "开始IDA批处理")
                idabatch.ida_processing_batch()
                self.log("log", "处理结束")
                # self.test()
                return
            if self.args.normal:
                self.log("log", "sub normal start")
                n_path = config.path['normal_samplefolder']
                ns_path = config.path['normal_sequencesfolder']
                # 解压文件
                self.un_zip(path=n_path)
                # self.log("log", "sub un_zip done")
                print("sub un_zip done")
                # 处理非PE文件
                pe_select.pe_select(n_path)
                self.log("log", "sub select done")
                # 提取序列
                idabatch.ida_processing_batch(n_path, ns_path)
                self.log("log", "sub batch done")
                return
            if self.args.malware:
                print("sub malware")
                mn_path = config.path['malware_samplefolder']
                mns_path = config.path['malware_sequencesfolder']
                # 解压文件
                self.un_zip(path=mn_path)
                print("un_zip done")
                # 处理非PE文件
                pe_select.pe_select(mn_path)
                print("pe_select done")
                # 提取序列
                idabatch.ida_processing_batch(mn_path, mns_path)
                print("batch done")
                self.log("log", "process done")
                return
            if self.args.train:
                self.log("log", "sub train")
                # 提取特征序列
                # 向量化
                # 训练
                # self.test()
                return
            return
        if not __sessions__.is_set():
            self.log(
                'error',
                "No open session. This command expects a file to be open.")
            print("this is the first print")
            return


def del_file(path):
    for root, dirs, files in os.walk(path):
        for name in files:
            os.remove(os.path.join(root, name))
    for root, dirs, files in os.walk(path):
        for dname in dirs:
            os.rmdir(os.path.join(root, dname))
