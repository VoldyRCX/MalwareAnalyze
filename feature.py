# coding:utf-8
# 特征处理
# 待处理文件存放在config.path['sequencesfolder']路径下
# 频率阈值在config.const['smin'],config.const['smax']

import os
import config


def select_feature():
    # 临时列表去重
    ltmp = []
    # 统计字典
    dcount = {}
    # 计总序列树
    isum = 0
    # 特征列表
    lfeatures = []
    # 阈值
    smin = config.const['smin']
    smax = config.const['smax']
    # 开始处理
    # 先处理恶意样本
    for fpathe, dirs, fs in os.walk(config.path['sequencesfolder']):
        for f in fs:
            filepath = (os.path.join(fpathe, f))
            ltmp = []
            isum += 1
            with open(filepath, "r", encoding='utf-8') as fopen:
                flines = fopen.readlines()
                # 处理行
                for eachline in flines:
                    eachline = eachline.replace('\n', '')
                    # 去重
                    if eachline in ltmp:
                        continue
                    else:
                        ltmp.append(eachline)
                        # 统计
                        if dcount.__contains__(eachline):
                            dcount[eachline] += 1
                        else:
                            dcount[eachline] = 1
            fopen.close()
    # 遍历字典，选取序列
    for (key, value) in dcount.items():
        if float(value) / float(isum) > smin and float(value) / float(
                isum) < smax:
            lfeatures.append(key)
    # 选取完毕，写入文件
    with open(
            config.path['outfolder'] + config.filename['feature'],
            'w',
            encoding='utf-8') as fout:
        # print(lfeatures)
        s = '\n'.join(lfeatures)
        fout.write(s)
        fout.close()


if __name__ == '__main__':
    select_feature()


class Feature():
    def __init__(self):
        pass
