# coding:utf-8
# utf-8 only
# this file for IDA
# 中文
import idautils
import idc
import idaapi
# import sys
import config

s3_cutpoint = [
    'je', 'jne', 'ja', 'jna', 'jae', 'jnae', 'jb', 'jnb', 'jbe', 'jnbe', 'jg',
    'jng', 'jge', 'jnge', 'jl', 'jnl', 'jle', 'jnle', 'jz', 'jnz', 'js', 'jns',
    'jc', 'jnc', 'jmp', 'jo', 'jno', 'jp', 'jnp', 'jpe', 'jpo', 'retn', 'call'
]


def sequence3(out_path=config.path['outfolder']):
    FeatList = []
    s = ""
    opcodelist_path = out_path + config.filename['opcodetmp']
    # wait for IDA
    idaapi.autoWait()
    for func in idautils.Functions():
        flags = idc.GetFunctionFlags(func)
        if flags & FUNC_LIB or flags & FUNC_THUNK:
            continue
        dism_addr = list(idautils.FuncItems(func))
        for line in dism_addr:
            opcode = idc.GetMnem(line)
            s += str(opcode) + " "
            # 考虑到其他算法，这里不能去重
            if opcode in s3_cutpoint:
                FeatList.append(s)
                s = ""
            # save the last sequence
    if s not in FeatList and s != "":
        FeatList.append(s)
    # write the sequences to the file
    f = open(opcodelist_path, 'w')
    f.write("\n".join(FeatList))
    f.close()
    idc.Exit(0)


if __name__ == '__main__':
    # sequence3(sys.argv[1])
    sequence3()


class Sequence3():
    def __init__(self):
        pass
